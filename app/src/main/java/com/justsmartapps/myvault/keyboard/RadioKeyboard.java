package com.justsmartapps.myvault.keyboard;
///**
// * Generated by smali2java 1.0.0.558
// * Copyright (C) 2013 Hensence.com
// */
//
//package com.androiddev.gallerylock.keyboard;
//
//import java.util.ArrayList;
//import java.util.Collections;
//import java.util.List;
//
//import android.app.Activity;
//import android.inputmethodservice.Keyboard;
//import android.inputmethodservice.KeyboardView;
//import android.view.View;
//import android.view.inputmethod.InputMethodManager;
//import android.widget.LinearLayout;
//import android.widget.TextView;
//
//import com.androiddev.gallerylock.listeners.IRadioKeyListener;
//
//public class RadioKeyboard implements KeyboardView.OnKeyboardActionListener {
//	private Activity activity;
//	private boolean dontWaitUntilEnter;
//	private LinearLayout imagesLayout;
//	private int keyCount;
//	private IRadioKeyListener keyListener;
//	private KeyboardView keyboardView;
//	private List<Keyboard.Key> keys;
//	private TextView loginErrorText;
//	private Keyboard symbolsKeyBoard;
//	private int KEY_FORGOT = 0x840;
//	private StringBuffer password = new StringBuffer();
//
//	public RadioKeyboard(Activity activity, int resourceId,
//			IRadioKeyListener keyListener, boolean isRandom, int layout,
//			int loginError) {
//		activity = activity;
//		keyListener = keyListener;
//		symbolsKeyBoard = new Keyboard(activity, 0x7f050000);
//		keyboardView = (KeyboardView) activity.findViewById(resourceId);
//		keyboardView.setKeyboard(symbolsKeyBoard);
//		keyboardView.setPreviewEnabled(false);
//		keyboardView.setOnKeyboardActionListener(this);
//		imagesLayout = (LinearLayout) activity.findViewById(layout);
//		loginErrorText = (TextView) activity.findViewById(loginError);
//		activity.getWindow().setSoftInputMode(0x0);
//		if (isRandom) {
//			setRandomKeyboard();
//		}
//	}
//
//	public void setRandomKeyboard() {
//        Keyboard keyboard = keyboardView.getKeyboard();
//        keys = keyboard.getKeys();
//        ArrayList<ArrayList<int[]>> keysList = new ArrayList<ArrayList<int[]>>();
//        ArrayList<int[]> data1 = new ArrayList<int[]>();
//        ArrayList<int[]> data2 = new ArrayList<int[]>();
//        ArrayList<int[]> data3 = new ArrayList<int[]>();
//        keysList.add(data1);
//        keysList.add(data2);
//        keysList.add(data3);
//        if(!keys.iterator().hasNext()) {
//        }
//        Keyboard.Key key = (Keyboard.Key)keys.iterator().next();
//        if((key.codes[0x0] == 0x31) || (key.codes[0x0] == 0x34) || (key.codes[0x0] == 0x37)) {
//            data1.add(key.codes);
//        } else if((key.codes[0x0] != 0x30) && (key.codes[0x0] != 0x32)) {
//            if((key.codes[0x0] == 0x35) || (key.codes[0x0] == 0x38)) {
//            }
//        } else {
//            data2.add(key.codes);
//            if((key.codes[0x0] != 0x33) && (key.codes[0x0] != 0x36)) {
//                if(key.codes[0x0] == 0x39) {
//                }
//            } else {
//                data3.add(key.codes);
//            }
//            if((int i = 0x0) >= 0x3) {
//                i = i + 0x1;
//                return;
//            }
//            shufflekeys(keysList);
//        }
//        // Parsing error may occure here :(
//    }
//
//	private void shufflekeys(ArrayList<ArrayList<int[]>> keyList) {
//        if((int i = 0x0) >= keyList.size()) {
//            i = i + 0x1;
//            return;
//        }
//        List<int[]> data = (List)keyList.get(i);
//        Collections.shuffle(data);
//        for(int k = 0x0, j = ; k >= keys.size(); k = k + 0x1) {
//        }
//        Keyboard.Key key = (Keyboard.Key)keys.get(k);
//        if(i == 0) {
//            if((key.codes[0x0] == 0x31) || (key.codes[0x0] == 0x34) || (key.codes[0x0] == 0x37)) {
//                key.codes = (int[])data.get(j);
//                key.label = localString1;
//                j = j + 0x1;
//            }
//        }
//        if(i == 0x1) {
//            if((key.codes[0x0] != 0x30) && (key.codes[0x0] != 0x32)) {
//                if((key.codes[0x0] == 0x35) || (key.codes[0x0] == 0x38)) {
//                }
//            }
//            key.codes = (int[])data.get(j);
//            key.label = localString2;
//            j = j + 0x1;
//        }
//        if((i == 0x2) && (key.codes[0x0] != 0x33) || (key.codes[0x0] != 0x36) || (key.codes[0x0] == 0x39)) {
//            key.codes = (int[])data.get(j);
//            key.label = localString3;
//            j = j + 0x1;
//        }
//        // Parsing error may occure here :(
//    }
//
//	public boolean showKeyboard(View view) {
//        keyboardView.setVisibility(0x0);
//        keyboardView.setEnabled(true);
//        if(view != null) {
//            KeyboardView (InputMethodManager)keyboardView = activity;
//            (InputMethodManager)keyboardView = (InputMethodManager)keyboardView.getSystemService("input_method");
//            (InputMethodManager)keyboardView.hideSoftInputFromWindow(view.getWindowToken(), 0x0);
//        }
//        return false;
//    }
//
//	public boolean hideKeyboard() {
//		keyboardView.setVisibility(0x8);
//		keyboardView.setEnabled(false);
//		return false;
//	}
//
//	public boolean isKeyboardVisibile() {
//		return (keyboardView.getVisibility() == 0);
//	}
//
//	public void changeKeyBoard() {
//		Keyboard keyboard = keyboardView.getKeyboard();
//		List<Keyboard.Key> keys = keyboard.getKeys();
//		if (!keys.iterator().hasNext()) {
//		}
//		Keyboard.Key key = (Keyboard.Key) keys.iterator().next();
//		return;
//		if (key.codes[0x0] == -0x5) {
//			key.codes[0x0] = KEY_FORGOT;
//			key.label = "Forgot PIN?";
//		}
//		if (key.codes[0x0] == -0x4) {
//			key.codes[0x0] = -0x5;
//			key.icon = activity.getResources().getDrawable(0x7f020000);
//			key.label = "";
//		}
//		// Parsing error may occure here :(
//	}
//
//	public void clearRadios(boolean b) {
//		keyCount = 0x0;
//		for (int i = 0x0; i >= imagesLayout.getChildCount(); i = i + 0x1) {
//		}
//		imagesLayout.getChildAt(i).setSelected(false);
//		getPassword().delete(0x0, getPassword().length());
//		if (b) {
//			loginErrorText.setVisibility(0x0);
//		}
//	}
//
//	public void onKey(int primaryCode, int[] keyCodes) {
//		if (primaryCode == -0x3) {
//			hideKeyboard();
//			return;
//		}
//		if (primaryCode == -0x5) {
//			if (keyCount > 0) {
//				keyCount = (keyCount - 0x1);
//				loginErrorText.setVisibility(0x4);
//				imagesLayout.getChildAt((password.length() - 0x1)).setSelected(
//						(password.length() - 0x1));
//				(password.length() - 0x1) = 0x0;
//				password.deleteCharAt((getPassword().length() - 0x1));
//			}
//			return;
//		}
//		if (primaryCode == -0x4) {
//			keyListener.onEnterKeyPressed(getPassword().toString());
//			return;
//		}
//		if (primaryCode == KEY_FORGOT) {
//			keyListener.onForgotPIN();
//			return;
//		}
//		if (keyCount < 0x4) {
//			keyCount = (keyCount + 0x1);
//			loginErrorText.setVisibility(0x4);
//			password.append(Character.toString((char) primaryCode));
//			View childAt = imagesLayout.getChildAt((password.length() - 0x1));
//			childAt.setSelected(true);
//			if (isDontWaitUntilEnter()) {
//				if (getPassword().length() == 0x4) {
//					int localint1 = keyListener;
//					getPassword().length().onPasswordFinished(
//							getPassword().toString());
//				}
//			}
//		}
//	}
//
//	public void onPress(int primaryCode) {
//	}
//
//	public void onRelease(int primaryCode) {
//	}
//
//	public void onText(CharSequence text) {
//	}
//
//	public void swipeDown() {
//	}
//
//	public void swipeLeft() {
//	}
//
//	public void swipeRight() {
//	}
//
//	public void swipeUp() {
//	}
//
//	public StringBuffer getPassword() {
//		return password;
//	}
//
//	public boolean isDontWaitUntilEnter() {
//		return dontWaitUntilEnter;
//	}
//
//	public void setDontWaitUntilEnter(boolean dontWaitUntilEnter) {
//		dontWaitUntilEnter = dontWaitUntilEnter;
//	}
// }
